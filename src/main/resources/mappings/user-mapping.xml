<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- parameterType의 생략이 가능하다
	#{title}은 parameter로 전달된 getTitle()메서드를 
	호출한다.
 -->
<mapper namespace="user">

	<!-- 컬럼이름과 자바객체의 프로퍼티명이 다를 때는
	     아래처럼 매핑 규칙을 정해줘야 한다 -->
<!-- 	<resultMap id="userResult" type="user">
		<id property="id" column="ID"/>
		<result property="pw" column="PW"/>
		<result property="nickname" column="NICKNAME"/>
		<result property="tel" column="TEL"/>
		<result property="point" column="POINT"/>
		<result property="showEsetSetting" column="SHOWESETSETTING"/>
		<result property="address" column="ADDRESS"/>
		<result property="charge" column="CHARGE"/>
	</resultMap> -->
	
	<delete id="withdrawal">
		SET foreign_key_checks = 0;
		delete from unsettledcheck where uno = (select uno from unsettled where id = #{id});
		delete from unsettled where id = #{id};
		delete from holdingstock where id = #{id};
		delete from stocknotice where id = #{id};
		delete from tradinghistory where id = #{id};
		delete from user where id = #{id};
		delete from usermoney where id = #{id};
		delete from usernickname where id = #{id};
		delete from userranking where id = #{id};
		SET foreign_key_checks = 1;
	</delete>
	
	<select id="getTradeNotice" resultType="map">
			select notice.tno, stockName, category, tdatetime, tprice,quantity, confirm from stocknotice as notice join tradinghistory as td on td.tno = notice.tno where td.id = #{id} order by notice.tno desc limit 50;
	</select>
	
	<select id="getCommentNotice" resultType="map">
			SELECT c.pno, title, ndatetime, confirm FROM commentnotice as c join board as b on c.pno = b.pno where c.id = #{id} order by ndatetime desc limit 50;
	</select>
	
	<select id="getNewTradeNotice" resultType="map">
			select * from stocknotice where id = #{id} and confirm = 1;
	</select>
	
	<select id="getNewCommentNotice" resultType="map">
			SELECT * FROM commentnotice where id = #{id} and confirm = 1;
	</select>
	
	
	<delete id="deleteNotice">
		update stocknotice set confirm = 0 where id = #{id};
		update commentnotice set confirm = 0 where id = #{id};
	</delete>

	<insert id="signUp">
		INSERT INTO user(id, pw, nickname, tel, point, showEsetSetting, address, charge)
		VALUES(#{id}, #{pw}, #{nickname}, #{tel}, 0, #{showEsetSetting}, #{address}, 1);
		
		
		<!-- sql 두개 쓰려면 ; 붙여줘야한다 -->
		INSERT INTO usernickname(id, nickname)
		VALUES(#{id}, #{nickname});
		
		
		INSERT INTO usermoney(id, money)
		VALUES(#{id}, 10000000);
		
		insert into userranking(id, accumasset, resetpoint) VALUES(#{id}, 10000000 ,10000000);
	</insert>
	
	<select id="idCheck" resultType="int" parameterType="map">
		SELECT COUNT(*) 
		FROM user
		
		<choose>
			<when test='id != null and id !="" '>
				WHERE id = #{id}
			</when>
			<when test='nickname != null and nickname !="" '>
				WHERE nickname = #{nickname}
			</when>
			<when test='tel != null and tel !="" '>
				WHERE tel = #{tel} 
			</when>
		</choose>
	</select>
	
	<update id="pointUp" parameterType="user">
		UPDATE user 
		SET point = point+1000
		WHERE id IN (#{friend}, #{id})
	</update>
	
	<select id="getCurrentRevenue" resultType="map">
		SELECT nickname, ifnull((accumasset-resetpoint)/resetpoint*100, 0) as revenue FROM userranking as uk join usernickname as un on un.id = uk.id order by revenue desc Limit 10 ;
	</select>
	
	<!-- 로그인시 id and pw틀렸는지 체크 SignInDAO.login -->
	<select id="signInCheck" parameterType="user" resultType="user">
		SELECT *
		FROM user
		natural join usermoney
		WHERE id = #{id}
	</select>
	
	<select id="selectUser" parameterType="user" resultType="user">
		SELECT * 
		FROM user
		WHERE nickname = #{nickname}
	</select>
	
	<!-- 아이디찾기 -->
	<select id="findId" parameterType="user" resultType="user">
		SELECT *
		FROM user
		WHERE tel=#{tel}
	</select>
	
	<select id="existenceID" resultType="String">
		SELECT id from user where id = #{id};
	</select>
	
	
	<!-- 비밀번호 찾기 -->
	<select id="findPassword" parameterType="user" resultType="user">
		SELECT *
		FROM user
		WHERE id=#{id} 
	</select>
	<!-- 비밀번호 변경 -->
	<update id="updatePassword" parameterType="user">
		update user
		set pw=#{pw}
		where id=#{id}
	</update>
	<!-- 마이페이지 비밀번호 수정시 현재 비밀번호 체크 -->
	<select id="mypageUpdatePasswordCheck" resultType="int" parameterType="map">
		SELECT count(id)
		FROM user
		WHERE pw=#{pw} 
		AND id=#{id}
	</select>
	<!-- 마이페이지 비밀번호 수정 -->
	<update id="mypageUpdatePassword" parameterType="user">
		update user
		set pw=#{pw}
		where id=#{id}
	</update>
	<!-- 개인정보 수정하는 SQL UserInfoDAO.userInfoUpdate -->
	<update id="updateUser" parameterType="user">
		update user
		set NICKNAME=#{nickname}, ADDRESS=#{address}, showEsetSetting=#{showEsetSetting}
		where ID=#{id}
	</update>
	
	<select id="getChargingCount" parameterType="String" resultType="int">
		select charge
		from user
		where id=#{id}
	</select>
	
	<update id="consumpCharge" parameterType="String">
		update user
		natural join usermoney
		set charge=charge-1, money=10000000
		where id=#{id};
		
		delete 
		from unsettled 
		where id=#{id};
	

	
		update holdingstock
		set quantity=0, avgprice=0
		where id=#{id};
		
		update userranking
		set accumasset=10000000
		where id=#{id};
	</update>
	
	<select id="getUnoList" resultType="int">
		select uno
		from unsettled
		where id=#{id}
	</select>

	<delete id="deleteUnsettledCheck">
		delete 
		from unsettled
		where uno=#{uno};
	</delete>
	
	<select id="getAllUser" resultType="user">
		select *
		from user
		natural join usermoney
	</select>
	
	<update id="updateRanking" parameterType="map">
		update userranking
		set accumasset=#{asset}
		where id=#{id}
	</update>
	
	<update id="setResetPoint">
		update userranking as us set us.resetpoint = us.accumasset;
	</update>
	
	<select id="getRanking" parameterType="String" resultType="int">
		select count(*)
		from userranking 
		where accumasset >= (select accumasset 
							from userranking 
                    		where id=#{id});
	</select>
	
	<select id="getAccumAsset" parameterType="String" resultType="long">
		select accumasset
		from userranking
		where id=#{id}
	</select>
	<!-- <insert id="nickname">
		

		
	</insert> -->
	
	<!-- <update id="updateBoard">
		update board set TITLE=#{title},
		CONTENT=#{content} where SEQ=#{seq}
	</update>
	
	<delete id="deleteBoard">
		delete board where SEQ=#{seq}
	</delete> -->
	
	<!-- CDATA영역에 작성된 데이터는 단순 문자 데이터이다
	     그러므로 XML 파서는 처리하지 말아라. -->
	<!-- <select id="getBoardLt" resultType="board">
		<![CDATA[
		select * from board where SEQ <= #{seq}
		]]>
	</select> -->
		
	<!-- <select id="getBoardList_T" resultType="board">
		select * from board
		where TITLE like '%'||#{searchKeyword}||'%'
		order by SEQ desc
	</select>

	<select id="getBoardList_C" resultType="board">
		select * from board
		where CONTENT like '%'||#{searchKeyword}||'%'
		order by SEQ desc
	</select> -->

	<!-- <select id="getBoardList" resultType="board">
		select * from board
		where 1=1
		<if test="searchCondition == 'title'">
			and TITLE like '%'||#{searchKeyword}||'%'
		</if>
		<if test="searchCondition == 'content'">
			and CONTENT like '%'||#{searchKeyword}||'%'
		</if> 
		order by SEQ desc
	</select> -->
</mapper>






















